package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.persistence.EntityNotFoundException;
import javax.persistence.criteria.CriteriaBuilder;
import java.util.Optional;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@PutMapping(path = "/update")
	public @ResponseBody String updateUser(@RequestParam String id, @RequestParam String name
			, @RequestParam String email){

		Integer userId = Integer.valueOf(id);
		User user =  userRepository.findById(userId).orElseThrow(() -> new EntityNotFoundException(id));
		user.setName(name);
		user.setEmail(email);
		userRepository.save(user);
		return "Updated";
	}

	@GetMapping(path = "/one")
	public @ResponseBody String findById(@RequestParam String id){
		Integer userId = Integer.valueOf(id);
		User user =  userRepository.findById(userId).orElseThrow(() -> new EntityNotFoundException(id));
		return "User : " + user.getName() + ", " + user.getEmail();
	}


	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@DeleteMapping (path = "/delete")
	public @ResponseBody String deleteById(@RequestParam String id){
		Integer userId = Integer.valueOf(id);
		userRepository.deleteById(userId);
		return "Deleted";
	}
}
